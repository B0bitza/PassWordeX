# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PaginaPrincipala/PaginaPrincipala.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(800, 600)
        MainWindow.setMinimumSize(QtCore.QSize(800, 500))
        MainWindow.setWindowTitle("KeePassXC")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.globalMessageWidget = MessageWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.globalMessageWidget.sizePolicy().hasHeightForWidth())
        self.globalMessageWidget.setSizePolicy(sizePolicy)
        self.globalMessageWidget.setObjectName("globalMessageWidget")
        self.verticalLayout.addWidget(self.globalMessageWidget)
        self.toolbarSeparator = QtWidgets.QFrame(self.centralwidget)
        self.toolbarSeparator.setFrameShadow(QtWidgets.QFrame.Plain)
        self.toolbarSeparator.setFrameShape(QtWidgets.QFrame.HLine)
        self.toolbarSeparator.setObjectName("toolbarSeparator")
        self.verticalLayout.addWidget(self.toolbarSeparator)
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stackedWidget.sizePolicy().hasHeightForWidth())
        self.stackedWidget.setSizePolicy(sizePolicy)
        self.stackedWidget.setObjectName("stackedWidget")
        self.pageDatabase = QtWidgets.QWidget()
        self.pageDatabase.setObjectName("pageDatabase")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.pageDatabase)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tabWidget = DatabaseTabWidget(self.pageDatabase)
        self.tabWidget.setTabsClosable(True)
        self.tabWidget.setMovable(True)
        self.tabWidget.setObjectName("tabWidget")
        self.verticalLayout_2.addWidget(self.tabWidget)
        self.stackedWidget.addWidget(self.pageDatabase)
        self.pageSettings = QtWidgets.QWidget()
        self.pageSettings.setObjectName("pageSettings")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.pageSettings)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.settingsWidget = ApplicationSettingsWidget(self.pageSettings)
        self.settingsWidget.setObjectName("settingsWidget")
        self.verticalLayout_3.addWidget(self.settingsWidget)
        self.stackedWidget.addWidget(self.pageSettings)
        self.pageWelcome = QtWidgets.QWidget()
        self.pageWelcome.setObjectName("pageWelcome")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.pageWelcome)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(50, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.welcomeWidget = WelcomeWidget(self.pageWelcome)
        self.welcomeWidget.setObjectName("welcomeWidget")
        self.horizontalLayout.addWidget(self.welcomeWidget)
        spacerItem1 = QtWidgets.QSpacerItem(50, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout_5.addLayout(self.horizontalLayout)
        self.stackedWidget.addWidget(self.pageWelcome)
        self.pagePasswordGenerator = QtWidgets.QWidget()
        self.pagePasswordGenerator.setObjectName("pagePasswordGenerator")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.pagePasswordGenerator)
        self.verticalLayout_6.setContentsMargins(60, 30, 60, -1)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_6.addItem(spacerItem2)
        self.passwordGeneratorWidget = PasswordGeneratorWidget(self.pagePasswordGenerator)
        self.passwordGeneratorWidget.setObjectName("passwordGeneratorWidget")
        self.verticalLayout_6.addWidget(self.passwordGeneratorWidget)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_6.addItem(spacerItem3)
        self.stackedWidget.addWidget(self.pagePasswordGenerator)
        self.verticalLayout.addWidget(self.stackedWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuRecentDatabases = QtWidgets.QMenu(self.menuFile)
        self.menuRecentDatabases.setObjectName("menuRecentDatabases")
        self.menuImport = QtWidgets.QMenu(self.menuFile)
        self.menuImport.setObjectName("menuImport")
        self.menuExport = QtWidgets.QMenu(self.menuFile)
        self.menuExport.setObjectName("menuExport")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuEntries = QtWidgets.QMenu(self.menubar)
        self.menuEntries.setSeparatorsCollapsible(True)
        self.menuEntries.setObjectName("menuEntries")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuTheme = QtWidgets.QMenu(self.menuView)
        self.menuTheme.setObjectName("menuTheme")
        MainWindow.setMenuBar(self.menubar)
        self.toolBar = KPToolBar(MainWindow)
        self.toolBar.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.toolBar.setMovable(False)
        self.toolBar.setIconSize(QtCore.QSize(26, 26))
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setMenuRole(QtWidgets.QAction.QuitRole)
        self.actionQuit.setObjectName("actionQuit")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setMenuRole(QtWidgets.QAction.AboutRole)
        self.actionAbout.setObjectName("actionAbout")
        self.actionCheckForUpdates = QtWidgets.QAction(MainWindow)
        self.actionCheckForUpdates.setMenuRole(QtWidgets.QAction.ApplicationSpecificRole)
        self.actionCheckForUpdates.setObjectName("actionCheckForUpdates")
        self.actionDatabaseOpen = QtWidgets.QAction(MainWindow)
        self.actionDatabaseOpen.setObjectName("actionDatabaseOpen")
        self.actionDatabaseSave = QtWidgets.QAction(MainWindow)
        self.actionDatabaseSave.setEnabled(False)
        self.actionDatabaseSave.setObjectName("actionDatabaseSave")
        self.actionDatabaseClose = QtWidgets.QAction(MainWindow)
        self.actionDatabaseClose.setEnabled(False)
        self.actionDatabaseClose.setObjectName("actionDatabaseClose")
        self.actionDatabaseNew = QtWidgets.QAction(MainWindow)
        self.actionDatabaseNew.setObjectName("actionDatabaseNew")
        self.actionDatabaseMerge = QtWidgets.QAction(MainWindow)
        self.actionDatabaseMerge.setObjectName("actionDatabaseMerge")
        self.actionEntryNew = QtWidgets.QAction(MainWindow)
        self.actionEntryNew.setEnabled(False)
        self.actionEntryNew.setObjectName("actionEntryNew")
        self.actionEntryEdit = QtWidgets.QAction(MainWindow)
        self.actionEntryEdit.setEnabled(False)
        self.actionEntryEdit.setObjectName("actionEntryEdit")
        self.actionEntryDelete = QtWidgets.QAction(MainWindow)
        self.actionEntryDelete.setEnabled(False)
        self.actionEntryDelete.setObjectName("actionEntryDelete")
        self.actionGroupNew = QtWidgets.QAction(MainWindow)
        self.actionGroupNew.setEnabled(False)
        self.actionGroupNew.setObjectName("actionGroupNew")
        self.actionGroupEdit = QtWidgets.QAction(MainWindow)
        self.actionGroupEdit.setEnabled(False)
        self.actionGroupEdit.setObjectName("actionGroupEdit")
        self.actionGroupDelete = QtWidgets.QAction(MainWindow)
        self.actionGroupDelete.setEnabled(False)
        self.actionGroupDelete.setObjectName("actionGroupDelete")
        self.actionGroupDownloadFavicons = QtWidgets.QAction(MainWindow)
        self.actionGroupDownloadFavicons.setEnabled(False)
        self.actionGroupDownloadFavicons.setObjectName("actionGroupDownloadFavicons")
        self.actionGroupSortAsc = QtWidgets.QAction(MainWindow)
        self.actionGroupSortAsc.setEnabled(False)
        self.actionGroupSortAsc.setObjectName("actionGroupSortAsc")
        self.actionGroupSortDesc = QtWidgets.QAction(MainWindow)
        self.actionGroupSortDesc.setEnabled(False)
        self.actionGroupSortDesc.setObjectName("actionGroupSortDesc")
        self.actionDatabaseSaveAs = QtWidgets.QAction(MainWindow)
        self.actionDatabaseSaveAs.setEnabled(False)
        self.actionDatabaseSaveAs.setObjectName("actionDatabaseSaveAs")
        self.actionDatabaseSecurity = QtWidgets.QAction(MainWindow)
        self.actionDatabaseSecurity.setEnabled(False)
        self.actionDatabaseSecurity.setObjectName("actionDatabaseSecurity")
        self.actionReports = QtWidgets.QAction(MainWindow)
        self.actionReports.setEnabled(False)
        self.actionReports.setMenuRole(QtWidgets.QAction.NoRole)
        self.actionReports.setObjectName("actionReports")
        self.actionDatabaseSettings = QtWidgets.QAction(MainWindow)
        self.actionDatabaseSettings.setEnabled(False)
        self.actionDatabaseSettings.setMenuRole(QtWidgets.QAction.NoRole)
        self.actionDatabaseSettings.setObjectName("actionDatabaseSettings")
        self.actionEntryClone = QtWidgets.QAction(MainWindow)
        self.actionEntryClone.setEnabled(False)
        self.actionEntryClone.setObjectName("actionEntryClone")
        self.actionEntryMoveUp = QtWidgets.QAction(MainWindow)
        self.actionEntryMoveUp.setEnabled(False)
        self.actionEntryMoveUp.setObjectName("actionEntryMoveUp")
        self.actionEntryMoveDown = QtWidgets.QAction(MainWindow)
        self.actionEntryMoveDown.setEnabled(False)
        self.actionEntryMoveDown.setObjectName("actionEntryMoveDown")
        self.actionEntryCopyUsername = QtWidgets.QAction(MainWindow)
        self.actionEntryCopyUsername.setEnabled(False)
        self.actionEntryCopyUsername.setObjectName("actionEntryCopyUsername")
        self.actionEntryCopyPassword = QtWidgets.QAction(MainWindow)
        self.actionEntryCopyPassword.setEnabled(False)
        self.actionEntryCopyPassword.setObjectName("actionEntryCopyPassword")
        self.actionSettings = QtWidgets.QAction(MainWindow)
        self.actionSettings.setCheckable(True)
        self.actionSettings.setMenuRole(QtWidgets.QAction.PreferencesRole)
        self.actionSettings.setObjectName("actionSettings")
        self.actionPasswordGenerator = QtWidgets.QAction(MainWindow)
        self.actionPasswordGenerator.setCheckable(True)
        self.actionPasswordGenerator.setObjectName("actionPasswordGenerator")
        self.actionEntryAutoType = QtWidgets.QAction(MainWindow)
        self.actionEntryAutoType.setEnabled(False)
        self.actionEntryAutoType.setObjectName("actionEntryAutoType")
        self.actionEntryAutoTypeUsername = QtWidgets.QAction(MainWindow)
        self.actionEntryAutoTypeUsername.setEnabled(False)
        self.actionEntryAutoTypeUsername.setText("{USERNAME}")
        self.actionEntryAutoTypeUsername.setIconText("{USERNAME}")
        self.actionEntryAutoTypeUsername.setToolTip("{USERNAME}")
        self.actionEntryAutoTypeUsername.setObjectName("actionEntryAutoTypeUsername")
        self.actionEntryAutoTypeUsernameEnter = QtWidgets.QAction(MainWindow)
        self.actionEntryAutoTypeUsernameEnter.setEnabled(False)
        self.actionEntryAutoTypeUsernameEnter.setText("{USERNAME}{ENTER}")
        self.actionEntryAutoTypeUsernameEnter.setIconText("{USERNAME}{ENTER}")
        self.actionEntryAutoTypeUsernameEnter.setToolTip("{USERNAME}{ENTER}")
        self.actionEntryAutoTypeUsernameEnter.setObjectName("actionEntryAutoTypeUsernameEnter")
        self.actionEntryAutoTypePassword = QtWidgets.QAction(MainWindow)
        self.actionEntryAutoTypePassword.setEnabled(False)
        self.actionEntryAutoTypePassword.setText("{PASSWORD}")
        self.actionEntryAutoTypePassword.setIconText("{PASSWORD}")
        self.actionEntryAutoTypePassword.setToolTip("{PASSWORD}")
        self.actionEntryAutoTypePassword.setObjectName("actionEntryAutoTypePassword")
        self.actionEntryAutoTypePasswordEnter = QtWidgets.QAction(MainWindow)
        self.actionEntryAutoTypePasswordEnter.setEnabled(False)
        self.actionEntryAutoTypePasswordEnter.setText("{PASSWORD}{ENTER}")
        self.actionEntryAutoTypePasswordEnter.setIconText("{PASSWORD}{ENTER}")
        self.actionEntryAutoTypePasswordEnter.setToolTip("{PASSWORD}{ENTER}")
        self.actionEntryAutoTypePasswordEnter.setObjectName("actionEntryAutoTypePasswordEnter")
        self.actionEntryAutoTypeTOTP = QtWidgets.QAction(MainWindow)
        self.actionEntryAutoTypeTOTP.setEnabled(False)
        self.actionEntryAutoTypeTOTP.setText("{TOTP}")
        self.actionEntryAutoTypeTOTP.setIconText("{TOTP}")
        self.actionEntryAutoTypeTOTP.setToolTip("{TOTP}")
        self.actionEntryAutoTypeTOTP.setObjectName("actionEntryAutoTypeTOTP")
        self.actionEntryDownloadIcon = QtWidgets.QAction(MainWindow)
        self.actionEntryDownloadIcon.setObjectName("actionEntryDownloadIcon")
        self.actionEntryOpenUrl = QtWidgets.QAction(MainWindow)
        self.actionEntryOpenUrl.setEnabled(False)
        self.actionEntryOpenUrl.setObjectName("actionEntryOpenUrl")
        self.actionLockDatabase = QtWidgets.QAction(MainWindow)
        self.actionLockDatabase.setEnabled(False)
        self.actionLockDatabase.setObjectName("actionLockDatabase")
        self.actionLockAllDatabases = QtWidgets.QAction(MainWindow)
        self.actionLockAllDatabases.setEnabled(False)
        self.actionLockAllDatabases.setObjectName("actionLockAllDatabases")
        self.actionEntryCopyTitle = QtWidgets.QAction(MainWindow)
        self.actionEntryCopyTitle.setEnabled(False)
        self.actionEntryCopyTitle.setObjectName("actionEntryCopyTitle")
        self.actionEntryCopyURL = QtWidgets.QAction(MainWindow)
        self.actionEntryCopyURL.setEnabled(False)
        self.actionEntryCopyURL.setObjectName("actionEntryCopyURL")
        self.actionEntryCopyNotes = QtWidgets.QAction(MainWindow)
        self.actionEntryCopyNotes.setEnabled(False)
        self.actionEntryCopyNotes.setObjectName("actionEntryCopyNotes")
        self.actionExportCsv = QtWidgets.QAction(MainWindow)
        self.actionExportCsv.setEnabled(False)
        self.actionExportCsv.setObjectName("actionExportCsv")
        self.actionExportHtml = QtWidgets.QAction(MainWindow)
        self.actionExportHtml.setEnabled(False)
        self.actionExportHtml.setObjectName("actionExportHtml")
        self.actionImportKeePass1 = QtWidgets.QAction(MainWindow)
        self.actionImportKeePass1.setObjectName("actionImportKeePass1")
        self.actionImportOpVault = QtWidgets.QAction(MainWindow)
        self.actionImportOpVault.setObjectName("actionImportOpVault")
        self.actionImportCsv = QtWidgets.QAction(MainWindow)
        self.actionImportCsv.setObjectName("actionImportCsv")
        self.actionEntryTotp = QtWidgets.QAction(MainWindow)
        self.actionEntryTotp.setObjectName("actionEntryTotp")
        self.actionEntryTotpQRCode = QtWidgets.QAction(MainWindow)
        self.actionEntryTotpQRCode.setObjectName("actionEntryTotpQRCode")
        self.actionEntrySetupTotp = QtWidgets.QAction(MainWindow)
        self.actionEntrySetupTotp.setObjectName("actionEntrySetupTotp")
        self.actionEntryCopyTotp = QtWidgets.QAction(MainWindow)
        self.actionEntryCopyTotp.setObjectName("actionEntryCopyTotp")
        self.actionEntryCopyPasswordTotp = QtWidgets.QAction(MainWindow)
        self.actionEntryCopyPasswordTotp.setObjectName("actionEntryCopyPasswordTotp")
        self.actionGroupEmptyRecycleBin = QtWidgets.QAction(MainWindow)
        self.actionGroupEmptyRecycleBin.setVisible(False)
        self.actionGroupEmptyRecycleBin.setObjectName("actionGroupEmptyRecycleBin")
        self.actionDonate = QtWidgets.QAction(MainWindow)
        self.actionDonate.setObjectName("actionDonate")
        self.actionBugReport = QtWidgets.QAction(MainWindow)
        self.actionBugReport.setObjectName("actionBugReport")
        self.actionGettingStarted = QtWidgets.QAction(MainWindow)
        self.actionGettingStarted.setObjectName("actionGettingStarted")
        self.actionOnlineHelp = QtWidgets.QAction(MainWindow)
        self.actionOnlineHelp.setObjectName("actionOnlineHelp")
        self.actionUserGuide = QtWidgets.QAction(MainWindow)
        self.actionUserGuide.setObjectName("actionUserGuide")
        self.actionKeyboardShortcuts = QtWidgets.QAction(MainWindow)
        self.actionKeyboardShortcuts.setShortcut("Ctrl+/")
        self.actionKeyboardShortcuts.setObjectName("actionKeyboardShortcuts")
        self.actionDatabaseSaveBackup = QtWidgets.QAction(MainWindow)
        self.actionDatabaseSaveBackup.setEnabled(False)
        self.actionDatabaseSaveBackup.setObjectName("actionDatabaseSaveBackup")
        self.actionEntryAddToAgent = QtWidgets.QAction(MainWindow)
        self.actionEntryAddToAgent.setObjectName("actionEntryAddToAgent")
        self.actionEntryRemoveFromAgent = QtWidgets.QAction(MainWindow)
        self.actionEntryRemoveFromAgent.setObjectName("actionEntryRemoveFromAgent")
        self.actionCompactMode = QtWidgets.QAction(MainWindow)
        self.actionCompactMode.setCheckable(True)
        self.actionCompactMode.setObjectName("actionCompactMode")
        self.actionThemeAuto = QtWidgets.QAction(MainWindow)
        self.actionThemeAuto.setCheckable(True)
        self.actionThemeAuto.setChecked(True)
        self.actionThemeAuto.setObjectName("actionThemeAuto")
        self.actionThemeLight = QtWidgets.QAction(MainWindow)
        self.actionThemeLight.setCheckable(True)
        self.actionThemeLight.setObjectName("actionThemeLight")
        self.actionThemeDark = QtWidgets.QAction(MainWindow)
        self.actionThemeDark.setCheckable(True)
        self.actionThemeDark.setObjectName("actionThemeDark")
        self.actionThemeClassic = QtWidgets.QAction(MainWindow)
        self.actionThemeClassic.setCheckable(True)
        self.actionThemeClassic.setObjectName("actionThemeClassic")
        self.actionShowToolbar = QtWidgets.QAction(MainWindow)
        self.actionShowToolbar.setCheckable(True)
        self.actionShowToolbar.setChecked(True)
        self.actionShowToolbar.setObjectName("actionShowToolbar")
        self.actionShowPreviewPanel = QtWidgets.QAction(MainWindow)
        self.actionShowPreviewPanel.setCheckable(True)
        self.actionShowPreviewPanel.setChecked(True)
        self.actionShowPreviewPanel.setObjectName("actionShowPreviewPanel")
        self.actionAlwaysOnTop = QtWidgets.QAction(MainWindow)
        self.actionAlwaysOnTop.setCheckable(True)
        self.actionAlwaysOnTop.setShortcut("Ctrl+Shift+A")
        self.actionAlwaysOnTop.setObjectName("actionAlwaysOnTop")
        self.actionHideUsernames = QtWidgets.QAction(MainWindow)
        self.actionHideUsernames.setCheckable(True)
        self.actionHideUsernames.setShortcut("Ctrl+Shift+B")
        self.actionHideUsernames.setObjectName("actionHideUsernames")
        self.actionHidePasswords = QtWidgets.QAction(MainWindow)
        self.actionHidePasswords.setCheckable(True)
        self.actionHidePasswords.setChecked(True)
        self.actionHidePasswords.setShortcut("Ctrl+Shift+C")
        self.actionHidePasswords.setObjectName("actionHidePasswords")
        self.actionEntryAutoTypeSequence = QtWidgets.QAction(MainWindow)
        self.actionEntryAutoTypeSequence.setText("{USERNAME}{TAB}{PASSWORD}{ENTER}")
        self.actionEntryAutoTypeSequence.setIconText("{USERNAME}{TAB}{PASSWORD}{ENTER}")
        self.actionEntryAutoTypeSequence.setToolTip("{USERNAME}{TAB}{PASSWORD}{ENTER}")
        self.actionEntryAutoTypeSequence.setObjectName("actionEntryAutoTypeSequence")
        self.actionGroupClone = QtWidgets.QAction(MainWindow)
        self.actionGroupClone.setEnabled(False)
        self.actionGroupClone.setObjectName("actionGroupClone")
        self.actionEntryRestore = QtWidgets.QAction(MainWindow)
        self.actionEntryRestore.setText("Restore Entry(s)")
        self.actionEntryRestore.setToolTip("Restore Entry(s)")
        self.actionEntryRestore.setShortcut("Ctrl+R")
        self.actionEntryRestore.setObjectName("actionEntryRestore")
        self.actionLockDatabaseToolbar = QtWidgets.QAction(MainWindow)
        self.actionLockDatabaseToolbar.setEnabled(False)
        self.actionLockDatabaseToolbar.setObjectName("actionLockDatabaseToolbar")
        self.actionExportXML = QtWidgets.QAction(MainWindow)
        self.actionExportXML.setEnabled(False)
        self.actionExportXML.setObjectName("actionExportXML")
        self.menuImport.addAction(self.actionImportCsv)
        self.menuExport.addAction(self.actionExportCsv)
        self.menuExport.addAction(self.actionExportHtml)
        self.menuExport.addAction(self.actionExportXML)
        self.menuFile.addAction(self.actionDatabaseNew)
        self.menuFile.addAction(self.actionDatabaseOpen)
        self.menuFile.addAction(self.menuRecentDatabases.menuAction())
        self.menuFile.addAction(self.actionDatabaseSave)
        self.menuFile.addAction(self.actionDatabaseSaveAs)
        self.menuFile.addAction(self.actionDatabaseClose)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionLockDatabase)
        self.menuFile.addSeparator()
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.menuImport.menuAction())
        self.menuFile.addAction(self.menuExport.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionGettingStarted)
        self.menuHelp.addAction(self.actionUserGuide)
        self.menuHelp.addAction(self.actionKeyboardShortcuts)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionBugReport)
        self.menuHelp.addAction(self.actionAbout)
        self.menuEntries.addAction(self.actionEntryNew)
        self.menuEntries.addAction(self.actionEntryEdit)
        self.menuEntries.addAction(self.actionEntryDelete)
        self.menuEntries.addSeparator()
        self.menuEntries.addSeparator()
        self.menuEntries.addAction(self.actionEntryCopyUsername)
        self.menuEntries.addAction(self.actionEntryCopyPassword)
        self.menuEntries.addSeparator()
        self.menuEntries.addSeparator()
        self.menuEntries.addSeparator()
        self.menuEntries.addSeparator()
        self.menuEntries.addAction(self.actionEntryRestore)
        self.menuTools.addAction(self.actionPasswordGenerator)
        self.menuTools.addAction(self.actionSettings)
        self.menuTheme.addAction(self.actionThemeAuto)
        self.menuTheme.addAction(self.actionThemeLight)
        self.menuTheme.addAction(self.actionThemeDark)
        self.menuTheme.addAction(self.actionThemeClassic)
        self.menuView.addAction(self.menuTheme.menuAction())
        self.menuView.addAction(self.actionAlwaysOnTop)
        self.menuView.addAction(self.actionShowPreviewPanel)
        self.menuView.addAction(self.actionShowToolbar)
        self.menuView.addAction(self.actionHideUsernames)
        self.menuView.addAction(self.actionHidePasswords)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEntries.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addAction(self.actionDatabaseOpen)
        self.toolBar.addAction(self.actionDatabaseSave)
        self.toolBar.addAction(self.actionLockDatabaseToolbar)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionEntryNew)
        self.toolBar.addAction(self.actionEntryEdit)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionEntryDelete)
        self.toolBar.addAction(self.actionEntryCopyUsername)
        self.toolBar.addAction(self.actionEntryCopyPassword)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionPasswordGenerator)
        self.toolBar.addAction(self.actionSettings)
        self.toolBar.addSeparator()

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(2)
        self.tabWidget.setCurrentIndex(-1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.menuFile.setTitle(_translate("MainWindow", "&Database"))
        self.menuRecentDatabases.setTitle(_translate("MainWindow", "&Recent Databases"))
        self.menuImport.setTitle(_translate("MainWindow", "&Import"))
        self.menuExport.setTitle(_translate("MainWindow", "&Export"))
        self.menuHelp.setTitle(_translate("MainWindow", "&Help"))
        self.menuEntries.setTitle(_translate("MainWindow", "&Entries"))
        self.menuTools.setTitle(_translate("MainWindow", "&Tools"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuTheme.setTitle(_translate("MainWindow", "Theme"))
        self.actionQuit.setText(_translate("MainWindow", "&Quit"))
        self.actionAbout.setText(_translate("MainWindow", "&About"))
        self.actionCheckForUpdates.setText(_translate("MainWindow", "&Check for Updates"))
        self.actionDatabaseOpen.setText(_translate("MainWindow", "&Open Database…"))
        self.actionDatabaseSave.setText(_translate("MainWindow", "&Save Database"))
        self.actionDatabaseClose.setText(_translate("MainWindow", "&Close Database"))
        self.actionDatabaseNew.setText(_translate("MainWindow", "&New Database…"))
        self.actionDatabaseNew.setToolTip(_translate("MainWindow", "Create a new database"))
        self.actionDatabaseMerge.setText(_translate("MainWindow", "&Merge From Database…"))
        self.actionDatabaseMerge.setToolTip(_translate("MainWindow", "Merge from another KDBX database"))
        self.actionEntryNew.setText(_translate("MainWindow", "&New Entry…"))
        self.actionEntryNew.setToolTip(_translate("MainWindow", "Add a new entry"))
        self.actionEntryEdit.setText(_translate("MainWindow", "&Edit Entry…"))
        self.actionEntryEdit.setToolTip(_translate("MainWindow", "View or edit entry"))
        self.actionEntryDelete.setText(_translate("MainWindow", "&Delete Entry…"))
        self.actionGroupNew.setText(_translate("MainWindow", "&New Group…"))
        self.actionGroupNew.setToolTip(_translate("MainWindow", "Add a new group"))
        self.actionGroupEdit.setText(_translate("MainWindow", "&Edit Group…"))
        self.actionGroupDelete.setText(_translate("MainWindow", "&Delete Group…"))
        self.actionGroupDownloadFavicons.setText(_translate("MainWindow", "Download All &Favicons…"))
        self.actionGroupSortAsc.setText(_translate("MainWindow", "Sort &A-Z"))
        self.actionGroupSortDesc.setText(_translate("MainWindow", "Sort &Z-A"))
        self.actionDatabaseSaveAs.setText(_translate("MainWindow", "Sa&ve Database As…"))
        self.actionDatabaseSecurity.setText(_translate("MainWindow", "Database &Security…"))
        self.actionReports.setText(_translate("MainWindow", "Database &Reports…"))
        self.actionReports.setToolTip(_translate("MainWindow", "Statistics, health check, etc."))
        self.actionDatabaseSettings.setText(_translate("MainWindow", "&Database Settings…"))
        self.actionDatabaseSettings.setToolTip(_translate("MainWindow", "Database settings"))
        self.actionEntryClone.setText(_translate("MainWindow", "&Clone Entry…"))
        self.actionEntryMoveUp.setText(_translate("MainWindow", "Move u&p"))
        self.actionEntryMoveUp.setToolTip(_translate("MainWindow", "Move entry one step up"))
        self.actionEntryMoveDown.setText(_translate("MainWindow", "Move do&wn"))
        self.actionEntryMoveDown.setToolTip(_translate("MainWindow", "Move entry one step down"))
        self.actionEntryCopyUsername.setText(_translate("MainWindow", "Copy &Username"))
        self.actionEntryCopyUsername.setToolTip(_translate("MainWindow", "Copy username to clipboard"))
        self.actionEntryCopyPassword.setText(_translate("MainWindow", "Copy &Password"))
        self.actionEntryCopyPassword.setToolTip(_translate("MainWindow", "Copy password to clipboard"))
        self.actionSettings.setText(_translate("MainWindow", "&Settings"))
        self.actionPasswordGenerator.setText(_translate("MainWindow", "&Password Generator"))
        self.actionEntryAutoType.setText(_translate("MainWindow", "Perform &Auto-Type"))
        self.actionEntryDownloadIcon.setText(_translate("MainWindow", "Download &Favicon"))
        self.actionEntryOpenUrl.setText(_translate("MainWindow", "Open &URL"))
        self.actionLockDatabase.setText(_translate("MainWindow", "&Lock Database"))
        self.actionLockAllDatabases.setText(_translate("MainWindow", "Lock &All Databases"))
        self.actionEntryCopyTitle.setText(_translate("MainWindow", "&Title"))
        self.actionEntryCopyTitle.setToolTip(_translate("MainWindow", "Copy title to clipboard"))
        self.actionEntryCopyURL.setText(_translate("MainWindow", "&URL"))
        self.actionEntryCopyURL.setToolTip(_translate("MainWindow", "Copy URL to clipboard"))
        self.actionEntryCopyNotes.setText(_translate("MainWindow", "&Notes"))
        self.actionEntryCopyNotes.setToolTip(_translate("MainWindow", "Copy notes to clipboard"))
        self.actionExportCsv.setText(_translate("MainWindow", "&CSV File…"))
        self.actionExportHtml.setText(_translate("MainWindow", "&HTML File…"))
        self.actionImportKeePass1.setText(_translate("MainWindow", "KeePass 1 Database…"))
        self.actionImportKeePass1.setToolTip(_translate("MainWindow", "Import a KeePass 1 database"))
        self.actionImportOpVault.setText(_translate("MainWindow", "1Password Vault…"))
        self.actionImportOpVault.setToolTip(_translate("MainWindow", "Import a 1Password Vault"))
        self.actionImportCsv.setText(_translate("MainWindow", "CSV File…"))
        self.actionImportCsv.setToolTip(_translate("MainWindow", "Import a CSV file"))
        self.actionEntryTotp.setText(_translate("MainWindow", "Show TOTP"))
        self.actionEntryTotpQRCode.setText(_translate("MainWindow", "Show QR Code"))
        self.actionEntrySetupTotp.setText(_translate("MainWindow", "Set up TOTP…"))
        self.actionEntryCopyTotp.setText(_translate("MainWindow", "Copy &TOTP"))
        self.actionEntryCopyPasswordTotp.setText(_translate("MainWindow", "Copy Password and TOTP"))
        self.actionGroupEmptyRecycleBin.setText(_translate("MainWindow", "E&mpty recycle bin"))
        self.actionDonate.setText(_translate("MainWindow", "&Donate"))
        self.actionBugReport.setText(_translate("MainWindow", "Report a &Bug"))
        self.actionGettingStarted.setText(_translate("MainWindow", "&Getting Started"))
        self.actionGettingStarted.setToolTip(_translate("MainWindow", "Open Getting Started Guide"))
        self.actionOnlineHelp.setText(_translate("MainWindow", "&Online Help"))
        self.actionOnlineHelp.setToolTip(_translate("MainWindow", "Go to online documentation"))
        self.actionUserGuide.setText(_translate("MainWindow", "&User Guide"))
        self.actionUserGuide.setToolTip(_translate("MainWindow", "Open User Guide"))
        self.actionKeyboardShortcuts.setText(_translate("MainWindow", "&Keyboard Shortcuts"))
        self.actionDatabaseSaveBackup.setText(_translate("MainWindow", "Save Database Backup…"))
        self.actionEntryAddToAgent.setText(_translate("MainWindow", "Add key to SSH Agent"))
        self.actionEntryRemoveFromAgent.setText(_translate("MainWindow", "Remove key from SSH Agent"))
        self.actionCompactMode.setText(_translate("MainWindow", "Compact Mode"))
        self.actionThemeAuto.setText(_translate("MainWindow", "Automatic"))
        self.actionThemeLight.setText(_translate("MainWindow", "Light"))
        self.actionThemeDark.setText(_translate("MainWindow", "Dark"))
        self.actionThemeClassic.setText(_translate("MainWindow", "Classic (Platform-native)"))
        self.actionShowToolbar.setText(_translate("MainWindow", "Show Toolbar"))
        self.actionShowPreviewPanel.setText(_translate("MainWindow", "Show Preview Panel"))
        self.actionAlwaysOnTop.setText(_translate("MainWindow", "Always on Top"))
        self.actionHideUsernames.setText(_translate("MainWindow", "Hide Usernames"))
        self.actionHidePasswords.setText(_translate("MainWindow", "Hide Passwords"))
        self.actionGroupClone.setText(_translate("MainWindow", "Clone Group..."))
        self.actionLockDatabaseToolbar.setText(_translate("MainWindow", "&Lock Database"))
        self.actionExportXML.setText(_translate("MainWindow", "&XML File…"))
        self.actionExportXML.setToolTip(_translate("MainWindow", "XML File…"))
from gui.ApplicationSettingsWidget import ApplicationSettingsWidget
from gui.DatabaseTabWidget import DatabaseTabWidget
from gui.MessageWidget import MessageWidget
from gui.PasswordGeneratorWidget import PasswordGeneratorWidget
from gui.WelcomeWidget import WelcomeWidget
from Widgets import Toolbar


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
